class Solution {
public:

void merge(vector<int>& nums,int left,int mid,int right){
    vector<int>vec;
    int l=left,r=mid+1;
    while(l<=mid && r<=right){
        if(nums[l]<=nums[r]){
            vec.push_back(nums[l]);
            l++;
        }
        else{
            vec.push_back(nums[r]);
            r++;
        }
    }
    while(l<=mid)
    vec.push_back(nums[l++]);
    while(r<=left)
    vec.push_back(nums[r++]);
     for (int i = 0; i < vec.size(); i++) {
            nums[left + i] = vec[i];
        }
}
void mergesort(vector<int>& nums,int left,int right){
    if(left<right){
    int l=left,r=right;
    int mid=left+(right-left)/2;
    mergesort(nums,l,mid);
    mergesort(nums,mid+1,r);
    merge(nums,l,mid,r);
    }
}
    vector<int> sortArray(vector<int>& nums) {
    mergesort(nums,0,nums.size()-1);
    return nums;
    }
};
