class Solution {
public:
    void dfs(vector<int> graph[], vector<bool>& visited, int node) {
        visited[node] = true;
        for (auto it : graph[node]) {
            if (!visited[it]) {
                dfs(graph, visited, it);
            }
        }
    }

    int findCircleNum(vector<vector<int>>& isConnected) {
        int n = isConnected.size();
        vector<int> graph[n];

        // Build the graph using 0-based indexing
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (isConnected[i][j] == 1 && i != j) {
                    graph[i].push_back(j);
                    graph[j].push_back(i);  // Undirected graph, so add both directions
                }
            }
        }

        vector<bool> visited(n, false);
        int ans = 0;

        // Run DFS to count connected components
        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                ans++;
                dfs(graph, visited, i);
            }
        }

        return ans;
    }
};
