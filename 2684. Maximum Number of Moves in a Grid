class Solution {
public:
    int solve(vector<vector<int>>& grid, int row, int col, vector<vector<int>>& dp) {
        if (row >= grid.size() || col >= grid[0].size()) {
            return 0;
        }
        
        if (dp[row][col] != -1) return dp[row][col];
        
        int up = 0, right = 0, down = 0;
        
        if (row > 0 && col < grid[0].size() - 1 && grid[row][col] < grid[row - 1][col + 1])
            up = 1 + solve(grid, row - 1, col + 1, dp);
        if (col < grid[0].size() - 1 && grid[row][col] < grid[row][col + 1])
            right = 1 + solve(grid, row, col + 1, dp);
        if (row < grid.size() - 1 && col < grid[0].size() - 1 && grid[row][col] < grid[row + 1][col + 1])
            down = 1 + solve(grid, row + 1, col + 1, dp);
        
        dp[row][col] = max(up, max(right, down));
        return dp[row][col];
    }

    int maxMoves(vector<vector<int>>& grid) {
        int ans = 0;
        vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size(), -1));
        for (int i = 0; i < grid.size(); i++) {
            ans = max(ans, solve(grid, i, 0, dp));
        }
        return ans;
    }
};
