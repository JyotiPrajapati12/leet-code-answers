/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if(!head->next)
        return true;
        if(!head->next->next){
            if(head->val==head->next->val)
            return true;
            return false;
        }
        ListNode *slow=head;
        ListNode *fast=head;
        while(fast->next && fast->next->next){
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *current=slow->next;
        ListNode *previous=NULL;
        while(current){
                ListNode *forward=current->next;
                current->next=previous;
                previous=current;
                current=forward;
        }
      //  slow->next=previous;
        ListNode *s=head;
        ListNode *f=previous;
        while(f){
            if(s->val!=f->val)
            return false;
            f=f->next;
            s=s->next;
        }
        return true;
    }
};
