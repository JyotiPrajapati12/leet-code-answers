/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if (root == NULL) return ans;  // Handle the case when the tree is empty
        
        queue<TreeNode *> q;
        q.push(root);
        
        while (!q.empty()) {
            vector<int> vec;
            int n = q.size();
            
            for (int i = 0; i < n; i++) {
                TreeNode *temp = q.front();
                q.pop();
                
                if (temp != NULL) {
                    vec.push_back(temp->val);  // Access the node's value
                    
                    // Add the children of the current node to the queue
                    if (temp->left != NULL) q.push(temp->left);
                    if (temp->right != NULL) q.push(temp->right);
                }
            }
            ans.push_back(vec);  // Push the current level's values to the result
        }
        return ans;
    }
};
